{"version":3,"sources":["components/Home.js","components/NavMenu.js","components/Layout.js","App.js","registerServiceWorker.js","index.js"],"names":["Home","props","useState","lastEpisodeTitle","setLastEpisodeTitle","newEpisodeNumber","setNewEpisodeNumber","a","fetch","response","ok","Error","text","rssText","parser","DOMParser","dom","parseFromString","items","querySelectorAll","lastTitle","textContent","regex","lastNumber","parseInt","match","nextNumber","console","log","toString","getRSSdata","class","NavMenu","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","App","exact","path","component","Boolean","window","location","hostname","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename"],"mappings":"ySA+CeA,MA5Cf,SAAcC,GACV,MAAgDC,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAFiB,4CAIjB,4CAAAC,EAAA,4DACwB,8CADxB,SAGyBC,MAFD,+CADxB,WAGQC,EAHR,QAIkBC,GAJlB,sBAKc,IAAIC,MAAM,eALxB,uBAQwBF,EAASG,OARjC,OAQQC,EARR,OASQC,EAAS,IAAIC,UACbC,EAAMF,EAAOG,gBAAgBJ,EAAS,mBACtCK,EAAQF,EAAIG,iBAAiB,QAC7BC,EAAYF,EAAM,GAAGC,iBAAiB,SAAS,GAAGE,YACtDjB,EAAoBgB,GAEdE,EAAQ,UACRC,EAAaC,SAASJ,EAAUK,MAAMH,GAAO,IAG/CI,EAAaH,EAAa,EAE9BI,QAAQC,IAAI,OACZtB,EAAoBoB,EAAWG,YAtBnC,6CAJiB,sBAgCjB,OAhCiB,mCA8BjBC,GAGI,gCACI,uFACA,qBAAKC,MAAM,YAAX,SACI1B,IAEJ,uDAA0BF,S,gECpCzB6B,G,MAAb,kDAEI,WAAY/B,GAAQ,IAAD,8BACf,cAAMA,IACDgC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACTC,WAAW,GAJA,EAFvB,gDASI,WACIC,KAAKC,SAAS,CACVF,WAAYC,KAAKF,MAAMC,cAXnC,oBAcI,WACI,OACI,iCACI,cAACG,EAAA,EAAD,CAAQC,UAAU,+EAA+EC,OAAK,EAAtG,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAaC,IAAKC,IAAMC,GAAG,IAA3B,qCACA,cAACC,EAAA,EAAD,CAAeC,QAASX,KAAKJ,aAAcO,UAAU,SACrD,cAACS,EAAA,EAAD,CAAUT,UAAU,uCAAuCU,QAASb,KAAKF,MAAMC,UAAWe,QAAM,EAAhG,SACI,oBAAIX,UAAU,uBAAd,SACI,cAACY,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAST,IAAKC,IAAML,UAAU,YAAYM,GAAG,IAA7C,mCAxBpC,GAA6BQ,cAAhBtB,EACFuB,YAAcvB,EAAQwB,KCF1B,IAAMC,EAAb,4JAGI,WACI,OACI,8BAEI,cAACf,EAAA,EAAD,UACKL,KAAKpC,MAAMyD,iBARhC,GAA4BJ,aAAfG,EACFF,YAAcE,EAAOD,K,UCCXG,E,4JAEjB,WACI,OACI,cAAC,EAAD,CAAQnB,UAAU,IAAlB,SACI,cAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAW9D,U,GALhBsD,aAAZK,EACVJ,YAAcI,EAAIH,KCATO,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzC,MACvB,2DCLJ,IAAM0C,EAAUC,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,QAChEC,EAAcH,SAASI,eAAe,QAC5CC,IAASC,OACL,cAAC,IAAD,CAAeC,SAAUR,EAAzB,SACI,cAAC,EAAD,MAEJI,K","file":"static/js/main.e7727e7d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\n\r\nfunction Home(props) {\r\n    const [lastEpisodeTitle, setLastEpisodeTitle] = useState(\"\");\r\n    const [newEpisodeNumber, setNewEpisodeNumber] = useState(\"\");\r\n\r\n    async function getRSSdata() {\r\n        const waypointRSS = \"https://rss.acast.com/vicegamingsnewpodcast\";\r\n\r\n        let response = await fetch(waypointRSS);\r\n        if (!response.ok) {\r\n            throw new Error('HTTP Error!');\r\n        }\r\n\r\n        let rssText = await response.text();\r\n        let parser = new DOMParser();\r\n        let dom = parser.parseFromString(rssText, 'application/xml');\r\n        let items = dom.querySelectorAll('item');\r\n        let lastTitle = items[0].querySelectorAll('title')[0].textContent;\r\n        setLastEpisodeTitle(lastTitle);\r\n\r\n        const regex = /(\\d+)/gm;\r\n        const lastNumber = parseInt(lastTitle.match(regex)[0]);\r\n\r\n\r\n        let nextNumber = lastNumber + 1;\r\n\r\n        console.log(\"hit\")\r\n        setNewEpisodeNumber(nextNumber.toString());\r\n    }\r\n\r\n\r\n    getRSSdata();\r\n\r\n    return (\r\n        <div>\r\n            <p>The next episode of Waypoint Radio should be number...</p>\r\n            <div class=\"newNumber\">\r\n               {newEpisodeNumber}\r\n            </div>\r\n            <p>The last episode was: {lastEpisodeTitle}</p>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavMenu.css';\r\n\r\nexport class NavMenu extends Component {\r\n    static displayName = NavMenu.name;\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleNavbar = this.toggleNavbar.bind(this);\r\n        this.state = {\r\n            collapsed: true\r\n        };\r\n    }\r\n    toggleNavbar() {\r\n        this.setState({\r\n            collapsed: !this.state.collapsed\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <header>\r\n                <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\r\n                    <Container>\r\n                        <NavbarBrand tag={Link} to=\"/\">Waypoint Episode Number</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n                        <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\r\n                            <ul className=\"navbar-nav flex-grow\">\r\n                                <NavItem>\r\n                                    <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\r\n                                </NavItem>\r\n                            </ul>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container } from 'reactstrap';\r\nimport { NavMenu } from './NavMenu';\r\n\r\nexport class Layout extends Component {\r\n    static displayName = Layout.name;\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*<NavMenu />*/}\r\n                <Container>\r\n                    {this.props.children}\r\n                </Container>\r\n            </div >\r\n        );\r\n    }\r\n\r\n}","import { Route } from 'react-router-dom';\r\nimport { Component } from 'react';\r\nimport Home from './components/Home';\r\nimport { Layout } from './components/Layout';\r\nimport './custom.css'\r\n\nexport default class App extends Component {\n    static displayName = App.name;\n    render() {\n        return (\n            <Layout className=\"a\">\n                <Route exact path='/' component={Home} />\n            </Layout>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\nexport default function register () {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction registerValidSW (swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\nfunction checkValidServiceWorker (swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n    <BrowserRouter basename={baseUrl}>\n        <App />\n    </BrowserRouter>,\n    rootElement);"],"sourceRoot":""}